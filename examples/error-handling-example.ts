import { NeuroApi, APIError, APIConnectionError, APITimeoutError, APIUserAbortError } from "../src/index";

const client = new NeuroApi({
  apiKey: process.env.NEUROAPI_KEY || "invalid-key",
  baseURL: "https://neuroapi.host/v1",
  timeout: 5000, // –ö–æ—Ä–æ—Ç–∫–∏–π —Ç–∞–π–º–∞—É—Ç –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
});

async function basicErrorHandling() {
  console.log("üö® –ü—Ä–∏–º–µ—Ä –±–∞–∑–æ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫\n");

  try {
    const response = await client.chat.completions.create({
      model: "gpt-3.5-turbo",
      messages: [{ role: "user", content: "–ü—Ä–∏–≤–µ—Ç!" }],
    });

    console.log("‚úÖ –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç:", response.choices[0].message.content);
  } catch (error) {
    if (error instanceof APIError) {
      console.log("‚ùå API –û—à–∏–±–∫–∞:");
      console.log(`   –°—Ç–∞—Ç—É—Å: ${error.status}`);
      console.log(`   –°–æ–æ–±—â–µ–Ω–∏–µ: ${error.message}`);
      console.log(`   –î–µ—Ç–∞–ª–∏:`, error.body);
    } else if (error instanceof APIConnectionError) {
      console.log("üåê –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:", error.message);
    } else if (error instanceof APITimeoutError) {
      console.log("‚è±Ô∏è –¢–∞–π–º–∞—É—Ç:", error.message);
    } else {
      console.log("üî¥ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞:", error);
    }
  }
}

async function validationErrorsDemo() {
  console.log("\nüìã –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏\n");

  const invalidCases = [
    {
      name: "–ü—É—Å—Ç–∞—è –º–æ–¥–µ–ª—å",
      params: { model: "", messages: [{ role: "user" as const, content: "test" }] },
    },
    {
      name: "–ü—É—Å—Ç—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è",
      params: { model: "gpt-3.5-turbo", messages: [] },
    },
    {
      name: "–ù–µ–≤–∞–ª–∏–¥–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞",
      params: {
        model: "gpt-3.5-turbo",
        messages: [{ role: "user" as const, content: "test" }],
        temperature: 3.0,
      },
    },
    {
      name: "–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π top_p",
      params: {
        model: "gpt-3.5-turbo",
        messages: [{ role: "user" as const, content: "test" }],
        top_p: 1.5,
      },
    },
    {
      name: "–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π max_tokens",
      params: {
        model: "gpt-3.5-turbo",
        messages: [{ role: "user" as const, content: "test" }],
        max_tokens: 0,
      },
    },
  ];

  for (const testCase of invalidCases) {
    try {
      await client.chat.completions.create(testCase.params as any);
      console.log(`‚ùå ${testCase.name}: –û—à–∏–±–∫–∞ –ù–ï –ø—Ä–æ–∏–∑–æ—à–ª–∞ (–¥–æ–ª–∂–Ω–∞ –±—ã–ª–∞)`);
    } catch (error) {
      console.log(`‚úÖ ${testCase.name}: ${error instanceof Error ? error.message : "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"}`);
    }
  }
}

async function retryDemo() {
  console.log("\nüîÑ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è retry –ª–æ–≥–∏–∫–∏\n");

  // –ö–ª–∏–µ–Ω—Ç —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ retry
  const retryClient = new NeuroApi({
    apiKey: "invalid-key", // –ù–∞–º–µ—Ä–µ–Ω–Ω–æ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π –∫–ª—é—á
    baseURL: "https://httpstat.us/500", // URL –∫–æ—Ç–æ—Ä—ã–π –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 500
  });

  try {
    const response = await retryClient.makeRequest("/test", {});
    console.log("–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —É—Å–ø–µ—Ö:", response);
  } catch (error) {
    if (error instanceof APIError) {
      console.log(`üîÑ –ü–æ—Å–ª–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ø—ã—Ç–æ–∫ retry –ø–æ–ª—É—á–∏–ª–∏ –æ—à–∏–±–∫—É: ${error.status} ${error.message}`);
    } else {
      console.log("üîÑ Retry –Ω–µ –ø–æ–º–æ–≥:", error instanceof Error ? error.message : error);
    }
  }
}

async function abortDemo() {
  console.log("\n‚èπÔ∏è –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω—ã –∑–∞–ø—Ä–æ—Å–∞\n");

  const controller = new AbortController();

  // –û—Ç–º–µ–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É
  setTimeout(() => {
    console.log("‚èπÔ∏è –û—Ç–º–µ–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å...");
    controller.abort();
  }, 1000);

  try {
    const response = await client.makeRequest(
      "/chat/completions",
      {
        model: "gpt-3.5-turbo",
        messages: [{ role: "user", content: "–î–æ–ª–≥–∏–π –∑–∞–ø—Ä–æ—Å..." }],
      },
      {
        signal: controller.signal,
      }
    );

    console.log("–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —É—Å–ø–µ—Ö:", response);
  } catch (error) {
    if (error instanceof APIUserAbortError) {
      console.log("‚úÖ –ó–∞–ø—Ä–æ—Å –±—ã–ª —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º");
    } else if (error instanceof APITimeoutError) {
      console.log("‚è±Ô∏è –ó–∞–ø—Ä–æ—Å –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω –ø–æ —Ç–∞–π–º–∞—É—Ç—É");
    } else {
      console.log("‚ùå –î—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ:", error instanceof Error ? error.message : error);
    }
  }
}

async function withResponseDemo() {
  console.log("\nüìä –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è withResponse –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö\n");

  try {
    const response = await client.chat.completions.withResponse({
      model: "gpt-3.5-turbo",
      messages: [{ role: "user", content: "–ü—Ä–∏–≤–µ—Ç!" }],
    });

    console.log("‚úÖ –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏:");
    console.log(`   Request ID: ${response.requestId || "–Ω–µ –Ω–∞–π–¥–µ–Ω"}`);
    console.log(`   –°—Ç–∞—Ç—É—Å: ${response.response.status}`);
    console.log(`   –ó–∞–≥–æ–ª–æ–≤–∫–∏:`, Object.fromEntries(response.response.headers.entries()));
    console.log(`   –î–∞–Ω–Ω—ã–µ:`, response.data.choices[0].message.content);
  } catch (error) {
    if (error instanceof APIError) {
      console.log("‚ùå API –æ—à–∏–±–∫–∞ –≤ withResponse:");
      console.log(`   –°—Ç–∞—Ç—É—Å: ${error.status}`);
      console.log(`   –î–µ—Ç–∞–ª–∏:`, error.body);
    } else {
      console.log("‚ùå –î—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞:", error instanceof Error ? error.message : error);
    }
  }
}

async function streamingErrorDemo() {
  console.log("\nüåä –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ—à–∏–±–æ–∫ –≤ streaming\n");

  try {
    const stream = await client.chat.completions.stream({
      model: "gpt-3.5-turbo",
      messages: [{ role: "user", content: "–†–∞—Å—Å–∫–∞–∂–∏ –¥–ª–∏–Ω–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é" }],
    });

    stream.on("error", (error) => {
      console.log("‚ùå –û—à–∏–±–∫–∞ –≤ stream:", error.message);
    });

    stream.on("abort", () => {
      console.log("‚èπÔ∏è Stream –±—ã–ª –ø—Ä–µ—Ä–≤–∞–Ω");
    });

    stream.on("content.delta", (event) => {
      process.stdout.write(event.delta);
    });

    stream.on("end", () => {
      console.log("\n‚úÖ Stream –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ");
    });

    // –ü—Ä–µ—Ä—ã–≤–∞–µ–º stream —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
    setTimeout(() => {
      console.log("\n‚èπÔ∏è –ü—Ä–µ—Ä—ã–≤–∞–µ–º stream...");
      stream.abort();
    }, 2000);
  } catch (error) {
    console.log("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ stream:", error instanceof Error ? error.message : error);
  }
}

async function main() {
  console.log("üîß NeuroApi Error Handling Examples\n");
  console.log("=".repeat(50));

  await basicErrorHandling();
  await validationErrorsDemo();
  await retryDemo();
  await abortDemo();
  await withResponseDemo();
  await streamingErrorDemo();

  console.log("\n" + "=".repeat(50));
  console.log("‚úÖ –í—Å–µ –ø—Ä–∏–º–µ—Ä—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω—ã");
}

main().catch(console.error);
