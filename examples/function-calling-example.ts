import { NeuroApi } from "../src/index";

const client = new NeuroApi({
  apiKey: process.env.NEUROAPI_KEY || "your-api-key",
  baseURL: "https://neuroapi.host/v1",
});

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
const tools = [
  {
    type: "function" as const,
    function: {
      name: "get_weather",
      description: "–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –ø–æ–≥–æ–¥—É –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –≥–æ—Ä–æ–¥–µ",
      parameters: {
        type: "object",
        properties: {
          city: {
            type: "string",
            description: "–ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞",
          },
          unit: {
            type: "string",
            enum: ["celsius", "fahrenheit"],
            description: "–ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã",
          },
        },
        required: ["city"],
      },
    },
  },
  {
    type: "function" as const,
    function: {
      name: "calculate_tip",
      description: "–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —á–∞–µ–≤—ã–µ",
      parameters: {
        type: "object",
        properties: {
          bill_amount: {
            type: "number",
            description: "–°—É–º–º–∞ —Å—á–µ—Ç–∞",
          },
          tip_percentage: {
            type: "number",
            description: "–ü—Ä–æ—Ü–µ–Ω—Ç —á–∞–µ–≤—ã—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 15%)",
            default: 15,
          },
        },
        required: ["bill_amount"],
      },
    },
  },
];

// –°–∏–º—É–ª—è—Ü–∏—è –≤—ã–∑–æ–≤–∞ —Ñ—É–Ω–∫—Ü–∏–π
async function getWeather(city: string, unit: string = "celsius") {
  // –ó–¥–µ—Å—å –±—ã–ª –±—ã —Ä–µ–∞–ª—å–Ω—ã–π API –≤—ã–∑–æ–≤ –∫ —Å–µ—Ä–≤–∏—Å—É –ø–æ–≥–æ–¥—ã
  return {
    city,
    temperature: unit === "celsius" ? "22¬∞C" : "72¬∞F",
    condition: "–°–æ–ª–Ω–µ—á–Ω–æ",
    humidity: "45%",
  };
}

async function calculateTip(billAmount: number, tipPercentage: number = 15) {
  const tipAmount = (billAmount * tipPercentage) / 100;
  const total = billAmount + tipAmount;
  return {
    bill_amount: billAmount,
    tip_percentage: tipPercentage,
    tip_amount: tipAmount.toFixed(2),
    total: total.toFixed(2),
  };
}

async function handleFunctionCall(functionName: string, args: any) {
  switch (functionName) {
    case "get_weather":
      return await getWeather(args.city, args.unit);
    case "calculate_tip":
      return await calculateTip(args.bill_amount, args.tip_percentage);
    default:
      throw new Error(`Unknown function: ${functionName}`);
  }
}

async function main() {
  console.log("ü§ñ Function Calling Example\n");

  try {
    // –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å–∏—Ç –ø–æ–≥–æ–¥—É
    const response1 = await client.chat.completions.create({
      model: "gpt-3.5-turbo",
      messages: [
        {
          role: "user",
          content: "–ö–∞–∫–∞—è —Å–µ–π—á–∞—Å –ø–æ–≥–æ–¥–∞ –≤ –ú–æ—Å–∫–≤–µ?",
        },
      ],
      tools,
      tool_choice: "auto", // –ü–æ–∑–≤–æ–ª—è–µ–º –º–æ–¥–µ–ª–∏ —Å–∞–º–æ–π —Ä–µ—à–∞—Ç—å –∫–æ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
    });

    console.log("–ü–µ—Ä–≤—ã–π –æ—Ç–≤–µ—Ç:", response1.choices[0].message);

    if (response1.choices[0].message.tool_calls) {
      console.log("\nüîß –ú–æ–¥–µ–ª—å —Ö–æ—á–µ—Ç –≤—ã–∑–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏:");

      const toolCalls = response1.choices[0].message.tool_calls;
      const messages = [{ role: "user" as const, content: "–ö–∞–∫–∞—è —Å–µ–π—á–∞—Å –ø–æ–≥–æ–¥–∞ –≤ –ú–æ—Å–∫–≤–µ?" }, response1.choices[0].message];

      // –í—ã–∑—ã–≤–∞–µ–º –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏
      for (const toolCall of toolCalls) {
        console.log(`- ${toolCall.function.name}(${toolCall.function.arguments})`);

        const args = JSON.parse(toolCall.function.arguments);
        const result = await handleFunctionCall(toolCall.function.name, args);

        messages.push({
          role: "tool",
          content: JSON.stringify(result),
          tool_call_id: toolCall.id,
        });
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—Ä–∞—Ç–Ω–æ –º–æ–¥–µ–ª–∏
      const response2 = await client.chat.completions.create({
        model: "gpt-3.5-turbo",
        messages: messages as any,
      });

      console.log("\nüå§Ô∏è –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –ø–æ–≥–æ–¥–µ:");
      console.log(response2.choices[0].message.content);
    }

    console.log("\n" + "=".repeat(50) + "\n");

    // –í—Ç–æ—Ä–æ–π –ø—Ä–∏–º–µ—Ä - –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —á–∞–µ–≤—ã—Ö
    const response3 = await client.chat.completions.create({
      model: "gpt-3.5-turbo",
      messages: [
        {
          role: "user",
          content: "–°—á–µ—Ç –≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ —Å–æ—Å—Ç–∞–≤–∏–ª 120 —Ä—É–±–ª–µ–π. –°–∫–æ–ª—å–∫–æ –¥–∞—Ç—å —á–∞–µ–≤—ã—Ö 18%?",
        },
      ],
      tools,
      tool_choice: "auto",
    });

    if (response3.choices[0].message.tool_calls) {
      console.log("üí∞ –†–∞—Å—á–µ—Ç —á–∞–µ–≤—ã—Ö:");

      const toolCalls = response3.choices[0].message.tool_calls;
      const messages = [{ role: "user" as const, content: "–°—á–µ—Ç –≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ —Å–æ—Å—Ç–∞–≤–∏–ª 120 —Ä—É–±–ª–µ–π. –°–∫–æ–ª—å–∫–æ –¥–∞—Ç—å —á–∞–µ–≤—ã—Ö 18%?" }, response3.choices[0].message];

      for (const toolCall of toolCalls) {
        const args = JSON.parse(toolCall.function.arguments);
        const result = await handleFunctionCall(toolCall.function.name, args);

        messages.push({
          role: "tool",
          content: JSON.stringify(result),
          tool_call_id: toolCall.id,
        });
      }

      const response4 = await client.chat.completions.create({
        model: "gpt-3.5-turbo",
        messages: messages as any,
      });

      console.log(response4.choices[0].message.content);
    }

    console.log("\n" + "=".repeat(50) + "\n");

    // –ü—Ä–∏–º–µ—Ä –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
    console.log("‚ö° –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–≥–æ–¥—ã:");

    const response5 = await client.chat.completions.create({
      model: "gpt-3.5-turbo",
      messages: [
        {
          role: "user",
          content: "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?",
        },
      ],
      tools,
      tool_choice: {
        type: "function",
        function: { name: "get_weather" },
      },
    });

    console.log("–ú–æ–¥–µ–ª—å –±—ã–ª–∞ –ø—Ä–∏–Ω—É–∂–¥–µ–Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–≥–æ–¥—ã –¥–∞–∂–µ –≤ –æ–±—ã—á–Ω–æ–º —Ä–∞–∑–≥–æ–≤–æ—Ä–µ");
    console.log("Tool calls:", response5.choices[0].message.tool_calls);
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞:", error);
  }
}

// –ó–∞–ø—É—Å–∫ –µ—Å–ª–∏ —Ñ–∞–π–ª –∏—Å–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
main();
